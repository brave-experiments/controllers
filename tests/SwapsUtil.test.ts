import BigNumber from 'bignumber.js';
import { getOnce } from 'fetch-mock';
import { APIType, SwapsToken } from '../src/swaps/SwapsInterfaces';
import * as swapsUtil from '../src/swaps/SwapsUtil';
import { ETH_SWAPS_TOKEN_OBJECT } from '../src/swaps/SwapsUtil';

const API_TRADES = [
  {
    trade: null,
    sourceToken: '0x6b175474e89094c44da98b954eedeac495271d0f',
    destinationToken: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
    sourceAmount: '1000000000000000000',
    destinationAmount: null,
    error: 'Error fetching totle trade: Gas estimation failed.',
    approvalNeeded: null,
    maxGas: 2270000,
    averageGas: 583863,
    estimatedRefund: 38540,
    fetchTime: 2088,
    aggregator: 'totle',
    aggType: 'AGG',
    fee: 0.875,
    gasMultiplier: 1.5,
    priceSlippage: { ratio: 1, calculationError: 'No trade data to calculate price slippage', bucket: 'low' },
  },
  {
    trade: {
      data:
        '0x5f57552900000000000000000000000000000000000000000000000000000000000000800000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000a706172617377617056320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007800000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000eb8e2000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000006c00000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000eb8e300000000000000000000000000000000000000000000000000000000000f4f8d0000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000068000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c9eeed34a6e0edb7f32cffd1d12e625564db9e83000000000000000000000000080bf510fcbf18b91105470639e9561022937712000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000056178a0d5f301baf6cf3e1cd53d9863437345bf9000000000000000000000000c9eeed34a6e0edb7f32cffd1d12e625564db9e8300000000000000000000000055662e225a3376759c24331a9aed764f8f0c9fbb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f4f8d0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005fb4431d000000000000000000000000000000000000000000000000164869496ddc1ff1000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000421be34ecc3318073957cdf0c6f275946e0f7a8d462180669f26378854305f17b3572b429c7494fa458169ce645a772201374b047146178b9868d7eae9ab1d400f7d0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000086d6574616d61736b000000000000000000000000000000000000000000000000',
      from: '0xB0dA5965D43369968574D399dBe6374683773a65',
      value: '0',
      to: '0x881D40237659C251811CEC9c364ef91dC08D300C',
      gas: 2750000,
    },
    sourceAmount: '1000000000000000000',
    destinationAmount: '994675',
    error: null,
    sourceToken: '0x6b175474e89094c44da98b954eedeac495271d0f',
    destinationToken: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
    approvalNeeded: null,
    maxGas: 2750000,
    averageGas: 637198,
    estimatedRefund: 665220,
    fetchTime: 1049,
    aggregator: 'paraswap',
    aggType: 'AGG',
    fee: 0.875,
    gasMultiplier: 1.5,
    priceSlippage: { ratio: 1.0081693243499585, calculationError: '', bucket: 'low' },
  },
  {
    trade: {
      data:
        '0x5f57552900000000000000000000000000000000000000000000000000000000000000800000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000007756e69737761700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000dc1a09f859b200000000000000000000000000000000000000000000000000000000000000ed0c60000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000005fb44be60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f161421c8e00000000000000000000000000000000000000000000000000000000000000000040000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a2000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
      from: '0xB0dA5965D43369968574D399dBe6374683773a65',
      value: '0',
      to: '0x881D40237659C251811CEC9c364ef91dC08D300C',
      gas: 770000,
    },
    sourceAmount: '1000000000000000000',
    destinationAmount: '1000079',
    error: null,
    sourceToken: '0x6b175474e89094c44da98b954eedeac495271d0f',
    destinationToken: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
    approvalNeeded: null,
    maxGas: 770000,
    averageGas: 210546,
    estimatedRefund: 80000,
    fetchTime: 669,
    aggregator: 'uniswap',
    aggType: 'DEX',
    fee: 0.875,
    gasMultiplier: 1.5,
    priceSlippage: { ratio: 1.0027216076907874, calculationError: '', bucket: 'low' },
  },
];

const API_TOKENS: SwapsToken[] = [
  {
    address: '0x6b175474e89094c44da98b954eedeac495271d0f',
    symbol: 'DAI',
    decimals: 18,
    occurances: 30,
    iconUrl: 'https://cloudflare-ipfs.com/ipfs/QmNYVMm3iC7HEoxfvxsZbRoapdjDHj9EREFac4BPeVphSJ',
  },
  {
    address: '0xdac17f958d2ee523a2206206994597c13d831ec7',
    symbol: 'USDT',
    decimals: 6,
    occurances: 30,
    iconUrl: 'https://cloudflare-ipfs.com/ipfs/QmR3TGmDDdmid99ExTHwPiKro4njZhSidbjcTbSrS5rHnq',
  },
  {
    address: '0x8e870d67f660d95d5be530380d0ec0bd388289e1',
    symbol: 'PAX',
    decimals: 18,
    occurances: 30,
    iconUrl: 'https://cloudflare-ipfs.com/ipfs/QmQTzo6Ecdn54x7NafwegjLetAnno1ATL9Y8M3PcVXGVhR',
  },
];

const FAKE_SWAPS_TOKEN = {
  address: '0x0000000000000000000000000000000000000000',
  symbol: 'fakeswap',
  decimals: 18,
  occurances: 30,
  iconUrl: 'https://cloudflare-ipfs.com/ipfs/QmQTzo6Ecdn54x7NafwegjLetAnno1ATL9Y8M3PcVXGVhR',
};

describe('SwapsUtil', () => {
  describe('getBaseApiURL', () => {
    it('should return expected values', () => {
      expect(swapsUtil.getBaseApiURL(APIType.TRADES)).toBeTruthy();
      expect(swapsUtil.getBaseApiURL(APIType.TRADES)).toBeTruthy();
      expect(swapsUtil.getBaseApiURL(APIType.TOKENS)).toBeTruthy();
      expect(swapsUtil.getBaseApiURL(APIType.TOP_ASSETS)).toBeTruthy();
      expect(swapsUtil.getBaseApiURL(APIType.FEATURE_FLAG)).toBeTruthy();
      expect(swapsUtil.getBaseApiURL(APIType.AGGREGATOR_METADATA)).toBeTruthy();
    });
  });

  describe('fetchTradesInfo', () => {
    it('should work', async () => {
      getOnce(
        `https://api.metaswap.codefi.network/trades?destinationToken=0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48&sourceToken=0x6b175474e89094c44da98b954eedeac495271d0f&sourceAmount=1000000000000000000&slippage=3&timeout=10000&walletAddress=0xB0dA5965D43369968574D399dBe6374683773a65`,
        () => ({
          body: JSON.stringify(API_TRADES),
        }),
        { overwriteRoutes: true, method: 'GET' },
      );

      const quotes = await swapsUtil.fetchTradesInfo({
        slippage: 3,
        sourceToken: '0x6b175474e89094c44da98b954eedeac495271d0f',
        destinationToken: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
        sourceAmount: 1000000000000000000,
        fromAddress: '0xB0dA5965D43369968574D399dBe6374683773a65',
        metaData: {
          sourceTokenInfo: {
            address: '0x6b175474e89094c44da98b954eedeac495271d0f',
            symbol: 'DAI',
            decimals: 18,
            iconUrl: 'https://foo.bar/logo.png',
          },
          destinationTokenInfo: {
            decimals: 18,
            address: '',
            symbol: '',
          },
          accountBalance: '0x0',
        },
      });

      expect(quotes).toEqual({
        paraswap: {
          trade: {
            from: '0xb0da5965d43369968574d399dbe6374683773a65',
            data:
              '0x5f57552900000000000000000000000000000000000000000000000000000000000000800000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000a706172617377617056320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007800000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000eb8e2000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000006c00000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000eb8e300000000000000000000000000000000000000000000000000000000000f4f8d0000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000068000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c9eeed34a6e0edb7f32cffd1d12e625564db9e83000000000000000000000000080bf510fcbf18b91105470639e9561022937712000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000056178a0d5f301baf6cf3e1cd53d9863437345bf9000000000000000000000000c9eeed34a6e0edb7f32cffd1d12e625564db9e8300000000000000000000000055662e225a3376759c24331a9aed764f8f0c9fbb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f4f8d0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005fb4431d000000000000000000000000000000000000000000000000164869496ddc1ff1000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000421be34ecc3318073957cdf0c6f275946e0f7a8d462180669f26378854305f17b3572b429c7494fa458169ce645a772201374b047146178b9868d7eae9ab1d400f7d0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000086d6574616d61736b000000000000000000000000000000000000000000000000',
            gas: '0x29f630',
            to: '0x881d40237659c251811cec9c364ef91dc08d300c',
            value: '0x0',
          },
          sourceAmount: '1000000000000000000',
          destinationAmount: '994675',
          error: null,
          sourceToken: '0x6b175474e89094c44da98b954eedeac495271d0f',
          destinationToken: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
          approvalNeeded: null,
          maxGas: 2750000,
          averageGas: 637198,
          estimatedRefund: 665220,
          fetchTime: 1049,
          aggregator: 'paraswap',
          aggType: 'AGG',
          fee: 0.875,
          gasMultiplier: 1.5,
          priceSlippage: { ratio: 1.0081693243499585, calculationError: '', bucket: 'low' },
          slippage: 3,
        },
        uniswap: {
          trade: {
            from: '0xb0da5965d43369968574d399dbe6374683773a65',
            data:
              '0x5f57552900000000000000000000000000000000000000000000000000000000000000800000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000007756e69737761700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000dc1a09f859b200000000000000000000000000000000000000000000000000000000000000ed0c60000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000005fb44be60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f161421c8e00000000000000000000000000000000000000000000000000000000000000000040000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a2000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
            gas: '0xbbfd0',
            to: '0x881d40237659c251811cec9c364ef91dc08d300c',
            value: '0x0',
          },
          sourceAmount: '1000000000000000000',
          destinationAmount: '1000079',
          error: null,
          sourceToken: '0x6b175474e89094c44da98b954eedeac495271d0f',
          destinationToken: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
          approvalNeeded: null,
          maxGas: 770000,
          averageGas: 210546,
          estimatedRefund: 80000,
          fetchTime: 669,
          aggregator: 'uniswap',
          aggType: 'DEX',
          fee: 0.875,
          gasMultiplier: 1.5,
          priceSlippage: { ratio: 1.0027216076907874, calculationError: '', bucket: 'low' },
          slippage: 3,
        },
      });
    });
  });

  describe('fetchTokens', () => {
    it('should work', async () => {
      getOnce(
        `https://api.metaswap.codefi.network/tokens`,
        () => ({
          body: JSON.stringify(API_TOKENS.concat([FAKE_SWAPS_TOKEN])),
        }),
        { overwriteRoutes: true, method: 'GET' },
      );
      const tokens = await swapsUtil.fetchTokens();
      expect(tokens).toEqual(API_TOKENS.concat([ETH_SWAPS_TOKEN_OBJECT]));
    });
  });

  describe('fetchAggregatorMetadata', () => {
    it('should work', async () => {
      getOnce(
        `https://api.metaswap.codefi.network/aggregatorMetadata`,
        () => ({
          body: JSON.stringify(API_TRADES),
        }),
        { overwriteRoutes: true, method: 'GET' },
      );
      const aggregatorsMetadata = await swapsUtil.fetchAggregatorMetadata();
      expect(aggregatorsMetadata).toBeInstanceOf(Object);
    });
  });

  describe('fetchTopAssets', () => {
    it('should work', async () => {
      getOnce(
        `https://api.metaswap.codefi.network/topAssets`,
        () => ({
          body: JSON.stringify(API_TRADES),
        }),
        { overwriteRoutes: true, method: 'GET' },
      );
      const assets = await swapsUtil.fetchTopAssets();
      expect(assets).toBeTruthy();
      expect(assets).toBeInstanceOf(Array);
    });
  });

  describe('fetchSwapsFeatureLiveness', () => {
    it('should work', async () => {
      getOnce(
        `https://api.metaswap.codefi.network/featureFlag`,
        () => ({
          body: JSON.stringify({ active: true }),
        }),
        { overwriteRoutes: true, method: 'GET' },
      );
      const featureLiveness = await swapsUtil.fetchSwapsFeatureLiveness();
      expect(typeof featureLiveness).toBe('boolean');
    });
  });

  describe('fetchTokenPrice', () => {
    it('should work', async () => {
      const address = '0x6b175474e89094c44da98b954eedeac495271d0f';
      getOnce(
        `https://api.coingecko.com/api/v3/simple/token_price/ethereum?contract_addresses=0x6b175474e89094c44da98b954eedeac495271d0f&vs_currencies=eth`,
        () => ({
          body: JSON.stringify({ '0x6b175474e89094c44da98b954eedeac495271d0f': { eth: 0.00168682 } }),
        }),
        { overwriteRoutes: true, method: 'GET' },
      );
      const ethPrice = await swapsUtil.fetchTokenPrice(address);
      console.log('ethPriceethPriceethPrice', ethPrice);
      expect(ethPrice).toBeTruthy();
      expect(typeof ethPrice).toBe('number');
    });
  });

  describe('calculateGasEstimateWithRefund', () => {
    test.each`
      maxGas       | estimatedRefund | estimatedGas | expected
      ${0}         | ${0}            | ${0}         | ${'0'}
      ${undefined} | ${2_000_000}    | ${501_000}   | ${'500000'}
      ${3}         | ${2}            | ${1}         | ${'1'}
      ${3}         | ${3}            | ${1}         | ${'0'}
      ${10}        | ${5}            | ${6}         | ${'5'}
    `('should return expected value', ({ maxGas, estimatedRefund, estimatedGas, expected }) => {
      const estimated = swapsUtil.calculateGasEstimateWithRefund(maxGas, estimatedRefund, estimatedGas);
      expect(estimated).toBeInstanceOf(BigNumber);
      expect(estimated.toString(10)).toBe(expected);
    });
  });

  describe('getMedian', () => {
    const numbers = [...Array(9).keys()].map((i) => new BigNumber(i + 1));
    const largeNumbers = numbers.map((i) => i.multipliedBy(100));

    it.each([
      [numbers, '5'],
      [largeNumbers, '500'],
    ])('returns the middle value', (values, result) => {
      const middleValue = swapsUtil.getMedian(values);
      expect(middleValue).toBeInstanceOf(BigNumber);
      expect(middleValue.toString(10)).toBe(result);
    });

    it.each([
      [[...numbers, new BigNumber(10)], '5.5'],
      [[...largeNumbers, new BigNumber(1000)], '550'],
    ])('returns the median value', (values, result) => {
      const medianValue = swapsUtil.getMedian(values);
      expect(medianValue).toBeInstanceOf(BigNumber);
      expect(medianValue.toString(10)).toBe(result);
    });
  });
});
